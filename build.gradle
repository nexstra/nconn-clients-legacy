buildscript {  
    repositories {  
       jcenter()  
      maven {
              url "${rootProject.projectDir}/repo"
      }
    }  
    dependencies {  
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.5'  
        classpath "content-services:config:1.4.44"
    }  
}  
plugins {
  id "org.gradle.kotlin.kotlin-dsl" version "1.0-rc-5"
  id 'org.jetbrains.kotlin.jvm' version '1.2.61'
  id 'nexstra.docstore-dsl' version "1.0.6"
  id 'nexstra.core-dsl' version "1.0.2"
  id 'nexstra.client-dsl' version "1.0.2"
}
ext {
    if( project.hasProperty("datasource" ) ) datasource = file(project.getProperty("datasource"))
    else  datasource = file("system/datasource/cds-dev.ds" ) 
   templateDir = "${projectDir}/templates"
   cftemplate = "${buildDir}/cloud/cftemplate.yml"
   workflowDir = "${projectDir}/workflow"
}

apply plugin: 'kotlin'
apply plugin: 'java'
dependencies {
   def log4j_version = "2.8+"
  // compile "org.jetbrains.exposed:exposed:0.10.4"
    compile "mysql:mysql-connector-java:5.1.33"
    compile "org.jetbrains.kotlin:kotlin-script-runtime"
    compile "com.github.holgerbrandl:kscript-annotations:1.2"
    compile "content-services:config:1.4.44"
}
compileKotlin {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  kotlinOptions {
    jvmTarget = "1.8"
    apiVersion = "1.2"
    languageVersion = "1.2"
  }
}

import TemplatesKt
task templates( type: Task ) {
  group = 'nconnect'
  outputs.dir file("${buildDir}/templates")
  doLast {
      TemplatesKt.extractTemplates(file("${buildDir}/templates"),
        datasource )
  }
}
task reports( type: Task ) {
  inputs.property "datasource",datasource
  group = 'nconnect'
  outputs.dir file("${buildDir}/reports")
  doLast {
    ReportsKt.extractReports( file("${buildDir}/reports"),
        datasource )
  }
}
putDocuments {
  dependsOn templates
  group = 'nconnect'
  source templates.outputs.files //file("${buildDir}/templates")
  docuri 's3://nexstra-com-test-us-west-2/tmp/testdocstore/templates/'

}

task putReports(type:nexstra.PutTask) {
  group = 'nconnect'
  dependsOn reports
  source reports.outputs.files // file("${buildDir}/reports/")
  docuri 's3://nexstra-com-dev-config-us-west-2/system/config/reports/'
}


stepFunction {
    outputDir = file("build/steps/")
    source = file("steps/")
}
/*
createPackage {
     dependsOn("mergeTemplate")
 }

  "deployPackage"(DeployPackageTask::class) {
     dependsOn("createPackage")
  }
*/
mergeTemplate {
     dependsOn createTemplate
    templateFile =file("${templateDir}/cloudformation-template.yml")
    outputFile = file(cftemplate)
    source=fileTree(workflowDir)
    include("*.yml")
  }

createTemplate {
    dependsOn stepFunction
      templateFile =file("${templateDir}/step-template.yml")
      tag="STEPS"
      extension = "yml"
}
