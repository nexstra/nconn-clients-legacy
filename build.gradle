buildscript {  
    repositories {  
       jcenter()  
      maven {
              url "${rootProject.projectDir}/repo"
      }
    }  
    dependencies {  
        classpath "content-services:config:1.4.79"
    }
}  
plugins {
  id "org.ajoberstar.grgit" version "3.0.0-rc.2"
  // id "org.gradle.kotlin.kotlin-dsl" version "1.0-rc-6"
  id 'org.jetbrains.kotlin.jvm' version '1.3.10'
  id 'nexstra.docstore-dsl' version "1.0.6"
  id 'nexstra.core-dsl' version "1.0.6"
  id 'nexstra.client-dsl' version "1.0.4"
  //id 'json-validator' version "1.2.1"
  id "cz.alenkacz.gradle.jsonvalidator" version "1.2.1"
  id 'io.spring.dependency-management' version '1.0.6.RELEASE'
  id 'org.jetbrains.kotlin.plugin.noarg' version '1.3.0'
}
dependencyManagement {
  imports {
    mavenBom "org.apache.logging.log4j:log4j-bom:2.11.0"
  }
}
apply plugin: 'kotlin'
apply plugin: 'application'
mainClassName='nexstra.kv.RedissonKVKt'
//apply plugin: 'jsonschema2pojo'
def getAwsBucket() {
  if( rootProject.hasProperty('awsBucket') ) rootProject.getProperty('awsBucket') else
  if( awsEnv == "dev" ) "nexstra-com-dev-res-us-west-2" else "nexstra-com-main-us-east-1"
  //{ println ("runnng subproc"); "awscmd get-export $awsEnv:resource:bucket".execute().text.trim() }
}
ext {
    if( project.hasProperty("datasource" ) ) datasource = "@" + project.getProperty("datasource")
    else  datasource = "@s3://nexstra-com-dev-config-us-west-2/system/datasource/cds-dev.ds"
   systemDir = "${projectDir}/system"
   templateDir = "${projectDir}/templates"
   cftemplate = "${buildDir}/cloud/cftemplate.yml"
   workflowDir = "${buildDir}/workflow"
}

dependencies {
  repositories {
    jcenter()
    maven {
      url "${rootProject.projectDir}/repo"
    }
  }
  compile "mysql:mysql-connector-java:5.1.33"
  compile "content-services:config:1.4.+"
  compile "nexstra.nconnect:client:0.1.+"
  compile "nexstra.nconnect:activities-api:0.1.+"
  compile "org.apache.logging.log4j:log4j-core"
  compile 'org.redisson:redisson:3.9.0'
}

//apply plugin: 'kotlin'
//apply plugin: 'java'
/*
dependencies {
   def log4j_version = "2.8+"
  // compile "org.jetbrains.exposed:exposed:0.10.4"
    compile "mysql:mysql-connector-java:5.1.33"
    compile "org.jetbrains.kotlin:kotlin-script-runtime"
    compile "com.github.holgerbrandl:kscript-annotations:1.2"
    compile "content-services:config:1.4.44"
}
compileKotlin {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  kotlinOptions {
    jvmTarget = "1.8"
    apiVersion = "1.2"
    languageVersion = "1.2"
  }
}
*/

task templates( type: Task ) {
  group = 'nconnect'
  outputs.dir file("${buildDir}/import/templates")
  doLast {
      TemplatesKt.extractTemplates(file("${buildDir}/import/templates"),
        datasource )
  }
}
task importDocuments( type: Task ) {
  inputs.property "datasource",datasource
  group = 'nconnect'
  def importDir =  file("${buildDir}/import")
  outputs.dir importDir
  doLast {
    ReportsKt.extractReports( importDir, datasource )
    ConnectorsKt.convertConnectors(importDir, datasource )
  }
}

putDocuments {
  dependsOn templates
  group = 'nconnect'
  source templates.outputs.files //file("${buildDir}/templates")
  docuri 's3://nexstra-com-test-us-west-2/tmp/testdocstore/templates/'

}

task putReports(type:nexstra.PutTask) {
  group = 'nconnect'
  dependsOn importDocuments
  source importDocuments.outputs.files // file("${buildDir}/reports/")
  docuri 's3://nexstra-com-dev-config-us-west-2/system/config/reports/'
}
cloud {
  bucket = "${->getAwsBucket()}"
}
stepFunction {
    outputDir = file("build/steps/")
    //source = file("${buildDir}/connectors/ReportAndEmail")
    source  fileTree("${buildDir}/import/"){
         include "*/steps/*.steps" 
    }
        println("in stepFunction: ${it} ")
    doFirst {
        source.files.each { println(it) } 
   }
    //source  file("${projectDir}/steps")
    //include "*.steps"
}
createPackage {
     dependsOn mergeTemplate
     template = file(cftemplate)
 }

task printme {
  doLast {
  def tree = fileTree("${buildDir}/import") {
    include "*/steps/*.steps"
  }
  println(tree.files)
  tree.files.each { println( it ) }
  //tree.visit { println(it.path) }
  }
}

deployPackage {
     dependsOn createPackage
  }
mergeTemplate {
     dependsOn createTemplate
    templateFile =file("${templateDir}/cloudformation-template.yml")
    outputFile = file(cftemplate)
    source=fileTree(workflowDir)
    include("*.yml")
  }

createTemplate {
    dependsOn stepFunction
      templateFile =file("${templateDir}/step-template.yml")
      tag="STEPS"
      extension = "yml"
}

/*
import cz.alenkacz.gradle.jsonvalidator.ValidateJsonTask
tasks.addRule("Pattern: validateSteps<ID>") { taskName ->
  if( taskName.startsWith("validateSteps") ){
    task(taskName,type:  ValidateJsonTask) {
      String id = taskName - "validateSteps"
      outputs.upToDateWhen { false } 
      targetJsonFile = file("steps/${id}.steps")
      jsonSchema = file("schemas/nexstra.client.workflow.Run${id}Parameters.json")
    }
  }
}
task validateAll { 
    ["Report","ReportAndEmail"].each {
      dependsOn  tasks["validateSteps${it}"]

      } 

}
*/

/*
task validateStepsReport(type: ValidateJsonTask) {
  outputs.upToDateWhen { false } 
  targetJsonFile = file("steps/Report.steps")
  jsonSchema = file("schemas/nexstra.client.workflow.RunReportParameters.json")
}
task validateStepsReportAndSync(type: ValidateJsonTask) {
  outputs.upToDateWhen { false } 
  targetJsonDirectory = file("steps/ReportAndSyncSFTP.steps")
  jsonSchema = file("schemas/nexstra.client.workflow.RunReportAndSyncSFTPParameters.json")
}
task validateStepsReportAndEmail(type: ValidateJsonTask) {
  outputs.upToDateWhen { false } 
  targetJsonDirectory = file("steps/ReportAndMail")
  jsonSchema = file("schemas/nexstra.client.workflow.RunReportAndEmailParameters.json")
}
task validateSteps {
   dependsOn validateStepsReport
   dependsOn validateStepsReportAndSync
   dependsOn validateStepsReportAndEmail
}


/*
jsonSchema2Pojo {
  source = files("${project.buildDir}/connectors")
targetDirectory = file("${project.buildDir}/generated-sources")
  sourceType="json"

}
*/


//build.enabled = false
//build.dependsOn validateSteps

task dimensions(type: Task ) {
  def dir =  file("${buildDir}/system")
  outputs.dir dir
  doLast {
      DimensionsKt.extractDimensions( dir ) 
  }

}

task datasources(type:Copy) {
  from("${systemDir}/datasources.json")
  into("${buildDir}/system")

}


task tryit {
  
  doLast {
    grgit.pull()
    grgit.log(includes:["HEAD"]).each{
      println it
}
    println grgit.describe()
  } 
}
repositories {
  mavenCentral()
}
dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}
compileKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}
compileTestKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}
